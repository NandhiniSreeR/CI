plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "3.3"
	id 'com.avast.gradle.docker-compose' version '0.14.3'
}

group = 'com.tw.bootcamp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.opencsv:opencsv:5.5.2'
	implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.flywaydb:flyway-core'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.3.3.RELEASE'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
	}
}

test.finalizedBy jacocoTestReport
tasks.named('sonarqube').configure {
	dependsOn test
}

apply plugin: "org.sonarqube"

test {
	systemProperty 'spring.profiles.active', 'test'
	useJUnitPlatform()
	reports {
		junitXml.enabled = true
	}
}
